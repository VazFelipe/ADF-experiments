{
	"name": "ETLMoviesFromGitHub",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesLoading_EL",
						"type": "DatasetReference"
					},
					"name": "MoviesAzureDataLakeStorage"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "SinkToDB"
				}
			],
			"transformations": [
				{
					"name": "SchemaChanging",
					"description": "Collumn deletion and renaming"
				},
				{
					"name": "FilterYearGreaterThan"
				},
				{
					"name": "DerivedPrimaryGenre",
					"description": "Creating if logic for column genres"
				},
				{
					"name": "Ranking"
				},
				{
					"name": "AggregateRatings",
					"description": "Aggregations"
				},
				{
					"name": "UpsertIfTrue"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> MoviesAzureDataLakeStorage",
				"MoviesAzureDataLakeStorage select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          {Rotten Tomato} = {Rotton Tomato}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SchemaChanging",
				"SchemaChanging filter(toInteger(year) > 1950) ~> FilterYearGreaterThan",
				"FilterYearGreaterThan derive(PrimaryGenre = iif(locate('|', genres) > 1, left(genres, locate('|',genres) - 1), genres)) ~> DerivedPrimaryGenre",
				"DerivedPrimaryGenre window(over(PrimaryGenre,",
				"          year),",
				"     desc({Rotten Tomato}, true),",
				"     RatingsRank = rank()) ~> Ranking",
				"Ranking aggregate(groupBy(PrimaryGenre,",
				"          year),",
				"     AverageRating = avg(toInteger({Rotten Tomato})),",
				"          HighestRated = first(title),",
				"          LowestRated = last(title),",
				"          NumberOfMovies = count()) ~> AggregateRatings",
				"AggregateRatings alterRow(upsertIf(true())) ~> UpsertIfTrue",
				"UpsertIfTrue sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['PrimaryGenre','year'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SinkToDB"
			]
		}
	}
}